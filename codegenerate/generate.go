package codegenerate

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"text/template"

	"github.com/Masterminds/sprig/v3"
)

type rawOptions struct {
	funcMaps []template.FuncMap
	format   bool
	data     any
}

func buildOptions(options []Option) *rawOptions {
	raw := &rawOptions{
		format: true,
	}
	for _, option := range options {
		option(raw)
	}
	return raw
}

type Option func(*rawOptions)

func Funcs(funcMap template.FuncMap) Option {
	return func(options *rawOptions) {
		options.funcMaps = append(options.funcMaps, funcMap)
	}
}

func DisableFormat() Option {
	return func(options *rawOptions) {
		options.format = false
	}
}

func Data(data any) Option {
	return func(options *rawOptions) {
		options.data = data
	}
}

func GenerateFromTemplate(source, destination string, options ...Option) error {
	name := filepath.Base(source)

	rawOptions := buildOptions(options)

	tpl := template.New(name).Funcs(sprig.TxtFuncMap())
	for _, funcMap := range rawOptions.funcMaps {
		tpl = tpl.Funcs(funcMap)
	}
	tpl, err := tpl.ParseFiles(source)
	if err != nil {
		return err
	}

	buffer := &bytes.Buffer{}
	if _, err := fmt.Fprintf(buffer, "// Code generated by %s; DO NOT EDIT.\n", name); err != nil {
		return err
	}
	if err := tpl.Execute(buffer, rawOptions.data); err != nil {
		return err
	}

	code := buffer.Bytes()
	if rawOptions.format {
		code, err = format.Source(buffer.Bytes())
		if err != nil {
			return err
		}
	}

	return os.WriteFile(destination, code, 0666)
}
